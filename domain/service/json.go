// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package service

import (
	json "encoding/json"
	domain "github.com/control-center/serviced/domain"
	addressassignment "github.com/control-center/serviced/domain/addressassignment"
	servicedefinition "github.com/control-center/serviced/domain/servicedefinition"
	health "github.com/control-center/serviced/health"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	http "net/http"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainService(in *jlexer.Lexer, out *ServiceEndpoint) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Purpose":
			out.Purpose = string(in.String())
		case "Protocol":
			out.Protocol = string(in.String())
		case "PortNumber":
			out.PortNumber = uint16(in.Uint16())
		case "PortTemplate":
			out.PortTemplate = string(in.String())
		case "VirtualAddress":
			out.VirtualAddress = string(in.String())
		case "Application":
			out.Application = string(in.String())
		case "ApplicationTemplate":
			out.ApplicationTemplate = string(in.String())
		case "AddressConfig":
			easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition(in, &out.AddressConfig)
		case "VHosts":
			if in.IsNull() {
				in.Skip()
				out.VHosts = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.VHosts = make([]string, 0, 4)
				} else {
					out.VHosts = []string{}
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.VHosts = append(out.VHosts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "VHostList":
			if in.IsNull() {
				in.Skip()
				out.VHostList = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.VHostList = make([]servicedefinition.VHost, 0, 2)
				} else {
					out.VHostList = []servicedefinition.VHost{}
				}
				for !in.IsDelim(']') {
					var v2 servicedefinition.VHost
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition1(in, &v2)
					out.VHostList = append(out.VHostList, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AddressAssignment":
			easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainAddressassignment(in, &out.AddressAssignment)
		case "PortList":
			if in.IsNull() {
				in.Skip()
				out.PortList = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.PortList = make([]servicedefinition.Port, 0, 1)
				} else {
					out.PortList = []servicedefinition.Port{}
				}
				for !in.IsDelim(']') {
					var v3 servicedefinition.Port
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition2(in, &v3)
					out.PortList = append(out.PortList, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainService(out *jwriter.Writer, in ServiceEndpoint) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Purpose\":")
	out.String(string(in.Purpose))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Protocol\":")
	out.String(string(in.Protocol))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PortNumber\":")
	out.Uint16(uint16(in.PortNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PortTemplate\":")
	out.String(string(in.PortTemplate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"VirtualAddress\":")
	out.String(string(in.VirtualAddress))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Application\":")
	out.String(string(in.Application))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ApplicationTemplate\":")
	out.String(string(in.ApplicationTemplate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AddressConfig\":")
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition(out, in.AddressConfig)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"VHosts\":")
	if in.VHosts == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v4, v5 := range in.VHosts {
			if v4 > 0 {
				out.RawByte(',')
			}
			out.String(string(v5))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"VHostList\":")
	if in.VHostList == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.VHostList {
			if v6 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition1(out, v7)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AddressAssignment\":")
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainAddressassignment(out, in.AddressAssignment)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PortList\":")
	if in.PortList == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.PortList {
			if v8 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition2(out, v9)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceEndpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainService(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceEndpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainService(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceEndpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainService(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceEndpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainService(l, v)
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition2(in *jlexer.Lexer, out *servicedefinition.Port) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "PortAddr":
			out.PortAddr = string(in.String())
		case "Enabled":
			out.Enabled = bool(in.Bool())
		case "UseTLS":
			out.UseTLS = bool(in.Bool())
		case "Protocol":
			out.Protocol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition2(out *jwriter.Writer, in servicedefinition.Port) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PortAddr\":")
	out.String(string(in.PortAddr))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Enabled\":")
	out.Bool(bool(in.Enabled))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"UseTLS\":")
	out.Bool(bool(in.UseTLS))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Protocol\":")
	out.String(string(in.Protocol))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainAddressassignment(in *jlexer.Lexer, out *addressassignment.AddressAssignment) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "AssignmentType":
			out.AssignmentType = string(in.String())
		case "HostID":
			out.HostID = string(in.String())
		case "PoolID":
			out.PoolID = string(in.String())
		case "IPAddr":
			out.IPAddr = string(in.String())
		case "Port":
			out.Port = uint16(in.Uint16())
		case "ServiceID":
			out.ServiceID = string(in.String())
		case "EndpointName":
			out.EndpointName = string(in.String())
		case "DatabaseVersion":
			out.DatabaseVersion = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainAddressassignment(out *jwriter.Writer, in addressassignment.AddressAssignment) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AssignmentType\":")
	out.String(string(in.AssignmentType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"HostID\":")
	out.String(string(in.HostID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PoolID\":")
	out.String(string(in.PoolID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"IPAddr\":")
	out.String(string(in.IPAddr))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Port\":")
	out.Uint16(uint16(in.Port))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ServiceID\":")
	out.String(string(in.ServiceID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"EndpointName\":")
	out.String(string(in.EndpointName))
	if in.DatabaseVersion != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"DatabaseVersion\":")
		out.Int(int(in.DatabaseVersion))
	}
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition1(in *jlexer.Lexer, out *servicedefinition.VHost) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Enabled":
			out.Enabled = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition1(out *jwriter.Writer, in servicedefinition.VHost) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Enabled\":")
	out.Bool(bool(in.Enabled))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition(in *jlexer.Lexer, out *servicedefinition.AddressResourceConfig) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Port":
			out.Port = uint16(in.Uint16())
		case "Protocol":
			out.Protocol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition(out *jwriter.Writer, in servicedefinition.AddressResourceConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Port\":")
	out.Uint16(uint16(in.Port))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Protocol\":")
	out.String(string(in.Protocol))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainService1(in *jlexer.Lexer, out *Service) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Title":
			out.Title = string(in.String())
		case "Version":
			out.Version = string(in.String())
		case "Context":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Context = make(map[string]interface{})
				} else {
					out.Context = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 interface{}
					v10 = in.Interface()
					(out.Context)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Environment":
			if in.IsNull() {
				in.Skip()
				out.Environment = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Environment = make([]string, 0, 4)
				} else {
					out.Environment = []string{}
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Environment = append(out.Environment, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Startup":
			out.Startup = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tags = make([]string, 0, 4)
				} else {
					out.Tags = []string{}
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.Tags = append(out.Tags, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "OriginalConfigs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OriginalConfigs = make(map[string]servicedefinition.ConfigFile)
				} else {
					out.OriginalConfigs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 servicedefinition.ConfigFile
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition3(in, &v13)
					(out.OriginalConfigs)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ConfigFiles":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ConfigFiles = make(map[string]servicedefinition.ConfigFile)
				} else {
					out.ConfigFiles = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 servicedefinition.ConfigFile
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition3(in, &v14)
					(out.ConfigFiles)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Instances":
			out.Instances = int(in.Int())
		case "InstanceLimits":
			easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain(in, &out.InstanceLimits)
		case "ChangeOptions":
			if in.IsNull() {
				in.Skip()
				out.ChangeOptions = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.ChangeOptions = make([]string, 0, 4)
				} else {
					out.ChangeOptions = []string{}
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.ChangeOptions = append(out.ChangeOptions, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ImageID":
			out.ImageID = string(in.String())
		case "PoolID":
			out.PoolID = string(in.String())
		case "DesiredState":
			out.DesiredState = int(in.Int())
		case "HostPolicy":
			out.HostPolicy = servicedefinition.HostPolicy(in.String())
		case "Hostname":
			out.Hostname = string(in.String())
		case "Privileged":
			out.Privileged = bool(in.Bool())
		case "Launch":
			out.Launch = string(in.String())
		case "Endpoints":
			if in.IsNull() {
				in.Skip()
				out.Endpoints = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Endpoints = make([]ServiceEndpoint, 0, 1)
				} else {
					out.Endpoints = []ServiceEndpoint{}
				}
				for !in.IsDelim(']') {
					var v16 ServiceEndpoint
					(v16).UnmarshalEasyJSON(in)
					out.Endpoints = append(out.Endpoints, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Tasks = make([]servicedefinition.Task, 0, 1)
				} else {
					out.Tasks = []servicedefinition.Task{}
				}
				for !in.IsDelim(']') {
					var v17 servicedefinition.Task
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition4(in, &v17)
					out.Tasks = append(out.Tasks, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ParentServiceID":
			out.ParentServiceID = string(in.String())
		case "Volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Volumes = make([]servicedefinition.Volume, 0, 1)
				} else {
					out.Volumes = []servicedefinition.Volume{}
				}
				for !in.IsDelim(']') {
					var v18 servicedefinition.Volume
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition5(in, &v18)
					out.Volumes = append(out.Volumes, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "CreatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "UpdatedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		case "DeploymentID":
			out.DeploymentID = string(in.String())
		case "DisableImage":
			out.DisableImage = bool(in.Bool())
		case "LogConfigs":
			if in.IsNull() {
				in.Skip()
				out.LogConfigs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.LogConfigs = make([]servicedefinition.LogConfig, 0, 1)
				} else {
					out.LogConfigs = []servicedefinition.LogConfig{}
				}
				for !in.IsDelim(']') {
					var v19 servicedefinition.LogConfig
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition6(in, &v19)
					out.LogConfigs = append(out.LogConfigs, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Snapshot":
			easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition7(in, &out.Snapshot)
		case "DisableShell":
			out.DisableShell = bool(in.Bool())
		case "Runs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Runs = make(map[string]string)
				} else {
					out.Runs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 string
					v20 = string(in.String())
					(out.Runs)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Commands":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Commands = make(map[string]domain.Command)
				} else {
					out.Commands = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 domain.Command
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain1(in, &v21)
					(out.Commands)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "RAMCommitment":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RAMCommitment).UnmarshalJSON(data))
			}
		case "CPUCommitment":
			out.CPUCommitment = uint64(in.Uint64())
		case "Actions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Actions = make(map[string]string)
				} else {
					out.Actions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 string
					v22 = string(in.String())
					(out.Actions)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "HealthChecks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HealthChecks = make(map[string]health.HealthCheck)
				} else {
					out.HealthChecks = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v23 health.HealthCheck
					if data := in.Raw(); in.Ok() {
						in.AddError((v23).UnmarshalJSON(data))
					}
					(out.HealthChecks)[key] = v23
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Prereqs":
			if in.IsNull() {
				in.Skip()
				out.Prereqs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Prereqs = make([]domain.Prereq, 0, 2)
				} else {
					out.Prereqs = []domain.Prereq{}
				}
				for !in.IsDelim(']') {
					var v24 domain.Prereq
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain2(in, &v24)
					out.Prereqs = append(out.Prereqs, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "MonitoringProfile":
			easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain3(in, &out.MonitoringProfile)
		case "MemoryLimit":
			out.MemoryLimit = float64(in.Float64())
		case "CPUShares":
			out.CPUShares = int64(in.Int64())
		case "PIDFile":
			out.PIDFile = string(in.String())
		case "DatabaseVersion":
			out.DatabaseVersion = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainService1(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Title\":")
	out.String(string(in.Title))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Version\":")
	out.String(string(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Context\":")
	if in.Context == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v25First := true
		for v25Name, v25Value := range in.Context {
			if !v25First {
				out.RawByte(',')
			}
			v25First = false
			out.String(string(v25Name))
			out.RawByte(':')
			out.Raw(json.Marshal(v25Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Environment\":")
	if in.Environment == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in.Environment {
			if v26 > 0 {
				out.RawByte(',')
			}
			out.String(string(v27))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Startup\":")
	out.String(string(in.Startup))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Tags\":")
	if in.Tags == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v28, v29 := range in.Tags {
			if v28 > 0 {
				out.RawByte(',')
			}
			out.String(string(v29))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"OriginalConfigs\":")
	if in.OriginalConfigs == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v30First := true
		for v30Name, v30Value := range in.OriginalConfigs {
			if !v30First {
				out.RawByte(',')
			}
			v30First = false
			out.String(string(v30Name))
			out.RawByte(':')
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition3(out, v30Value)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ConfigFiles\":")
	if in.ConfigFiles == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v31First := true
		for v31Name, v31Value := range in.ConfigFiles {
			if !v31First {
				out.RawByte(',')
			}
			v31First = false
			out.String(string(v31Name))
			out.RawByte(':')
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition3(out, v31Value)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Instances\":")
	out.Int(int(in.Instances))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"InstanceLimits\":")
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain(out, in.InstanceLimits)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ChangeOptions\":")
	if in.ChangeOptions == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in.ChangeOptions {
			if v32 > 0 {
				out.RawByte(',')
			}
			out.String(string(v33))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ImageID\":")
	out.String(string(in.ImageID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PoolID\":")
	out.String(string(in.PoolID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DesiredState\":")
	out.Int(int(in.DesiredState))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"HostPolicy\":")
	out.String(string(in.HostPolicy))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Hostname\":")
	out.String(string(in.Hostname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Privileged\":")
	out.Bool(bool(in.Privileged))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Launch\":")
	out.String(string(in.Launch))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Endpoints\":")
	if in.Endpoints == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v34, v35 := range in.Endpoints {
			if v34 > 0 {
				out.RawByte(',')
			}
			(v35).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Tasks\":")
	if in.Tasks == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v36, v37 := range in.Tasks {
			if v36 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition4(out, v37)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ParentServiceID\":")
	out.String(string(in.ParentServiceID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Volumes\":")
	if in.Volumes == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v38, v39 := range in.Volumes {
			if v38 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition5(out, v39)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CreatedAt\":")
	out.Raw((in.CreatedAt).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"UpdatedAt\":")
	out.Raw((in.UpdatedAt).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DeploymentID\":")
	out.String(string(in.DeploymentID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DisableImage\":")
	out.Bool(bool(in.DisableImage))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LogConfigs\":")
	if in.LogConfigs == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v40, v41 := range in.LogConfigs {
			if v40 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition6(out, v41)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Snapshot\":")
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition7(out, in.Snapshot)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DisableShell\":")
	out.Bool(bool(in.DisableShell))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Runs\":")
	if in.Runs == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v42First := true
		for v42Name, v42Value := range in.Runs {
			if !v42First {
				out.RawByte(',')
			}
			v42First = false
			out.String(string(v42Name))
			out.RawByte(':')
			out.String(string(v42Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Commands\":")
	if in.Commands == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v43First := true
		for v43Name, v43Value := range in.Commands {
			if !v43First {
				out.RawByte(',')
			}
			v43First = false
			out.String(string(v43Name))
			out.RawByte(':')
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain1(out, v43Value)
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"RAMCommitment\":")
	out.Raw((in.RAMCommitment).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CPUCommitment\":")
	out.Uint64(uint64(in.CPUCommitment))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Actions\":")
	if in.Actions == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v44First := true
		for v44Name, v44Value := range in.Actions {
			if !v44First {
				out.RawByte(',')
			}
			v44First = false
			out.String(string(v44Name))
			out.RawByte(':')
			out.String(string(v44Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"HealthChecks\":")
	if in.HealthChecks == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v45First := true
		for v45Name, v45Value := range in.HealthChecks {
			if !v45First {
				out.RawByte(',')
			}
			v45First = false
			out.String(string(v45Name))
			out.RawByte(':')
			out.Raw((v45Value).MarshalJSON())
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Prereqs\":")
	if in.Prereqs == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v46, v47 := range in.Prereqs {
			if v46 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain2(out, v47)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MonitoringProfile\":")
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain3(out, in.MonitoringProfile)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MemoryLimit\":")
	out.Float64(float64(in.MemoryLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CPUShares\":")
	out.Int64(int64(in.CPUShares))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"PIDFile\":")
	out.String(string(in.PIDFile))
	if in.DatabaseVersion != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"DatabaseVersion\":")
		out.Int(int(in.DatabaseVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainService1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainService1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainService1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainService1(l, v)
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain3(in *jlexer.Lexer, out *domain.MonitorProfile) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MetricConfigs":
			if in.IsNull() {
				in.Skip()
				out.MetricConfigs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.MetricConfigs = make([]domain.MetricConfig, 0, 1)
				} else {
					out.MetricConfigs = []domain.MetricConfig{}
				}
				for !in.IsDelim(']') {
					var v48 domain.MetricConfig
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain4(in, &v48)
					out.MetricConfigs = append(out.MetricConfigs, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "GraphConfigs":
			if in.IsNull() {
				in.Skip()
				out.GraphConfigs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.GraphConfigs = make([]domain.GraphConfig, 0, 1)
				} else {
					out.GraphConfigs = []domain.GraphConfig{}
				}
				for !in.IsDelim(']') {
					var v49 domain.GraphConfig
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain5(in, &v49)
					out.GraphConfigs = append(out.GraphConfigs, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ThresholdConfigs":
			if in.IsNull() {
				in.Skip()
				out.ThresholdConfigs = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.ThresholdConfigs = make([]domain.ThresholdConfig, 0, 1)
				} else {
					out.ThresholdConfigs = []domain.ThresholdConfig{}
				}
				for !in.IsDelim(']') {
					var v50 domain.ThresholdConfig
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain6(in, &v50)
					out.ThresholdConfigs = append(out.ThresholdConfigs, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain3(out *jwriter.Writer, in domain.MonitorProfile) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MetricConfigs\":")
	if in.MetricConfigs == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v51, v52 := range in.MetricConfigs {
			if v51 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain4(out, v52)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"GraphConfigs\":")
	if in.GraphConfigs == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v53, v54 := range in.GraphConfigs {
			if v53 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain5(out, v54)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ThresholdConfigs\":")
	if in.ThresholdConfigs == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v55, v56 := range in.ThresholdConfigs {
			if v55 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain6(out, v56)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain6(in *jlexer.Lexer, out *domain.ThresholdConfig) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "AppliedTo":
			out.AppliedTo = int(in.Int())
		case "MetricSource":
			out.MetricSource = string(in.String())
		case "DataPoints":
			if in.IsNull() {
				in.Skip()
				out.DataPoints = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.DataPoints = make([]string, 0, 4)
				} else {
					out.DataPoints = []string{}
				}
				for !in.IsDelim(']') {
					var v57 string
					v57 = string(in.String())
					out.DataPoints = append(out.DataPoints, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Threshold":
			out.Threshold = in.Interface()
		case "EventTags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EventTags = make(map[string]interface{})
				} else {
					out.EventTags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v58 interface{}
					v58 = in.Interface()
					(out.EventTags)[key] = v58
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain6(out *jwriter.Writer, in domain.ThresholdConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"AppliedTo\":")
	out.Int(int(in.AppliedTo))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"MetricSource\":")
	out.String(string(in.MetricSource))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"DataPoints\":")
	if in.DataPoints == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v59, v60 := range in.DataPoints {
			if v59 > 0 {
				out.RawByte(',')
			}
			out.String(string(v60))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Threshold\":")
	out.Raw(json.Marshal(in.Threshold))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"EventTags\":")
	if in.EventTags == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v61First := true
		for v61Name, v61Value := range in.EventTags {
			if !v61First {
				out.RawByte(',')
			}
			v61First = false
			out.String(string(v61Name))
			out.RawByte(':')
			out.Raw(json.Marshal(v61Value))
		}
		out.RawByte('}')
	}
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain5(in *jlexer.Lexer, out *domain.GraphConfig) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "footer":
			out.Footer = bool(in.Bool())
		case "format":
			out.Format = string(in.String())
		case "returnset":
			out.ReturnSet = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string][]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v62 []string
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						in.Delim('[')
						if !in.IsDelim(']') {
							v62 = make([]string, 0, 4)
						} else {
							v62 = []string{}
						}
						for !in.IsDelim(']') {
							var v63 string
							v63 = string(in.String())
							v62 = append(v62, v63)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Tags)[key] = v62
					in.WantComma()
				}
				in.Delim('}')
			}
		case "miny":
			if in.IsNull() {
				in.Skip()
				out.MinY = nil
			} else {
				if out.MinY == nil {
					out.MinY = new(int)
				}
				*out.MinY = int(in.Int())
			}
		case "maxy":
			if in.IsNull() {
				in.Skip()
				out.MaxY = nil
			} else {
				if out.MaxY == nil {
					out.MaxY = new(int)
				}
				*out.MaxY = int(in.Int())
			}
		case "yAxisLabel":
			out.YAxisLabel = string(in.String())
		case "timezone":
			out.TimeZone = string(in.String())
		case "downsample":
			out.DownSample = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "range":
			if in.IsNull() {
				in.Skip()
				out.Range = nil
			} else {
				if out.Range == nil {
					out.Range = new(domain.GraphConfigRange)
				}
				easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain7(in, &*out.Range)
			}
		case "datapoints":
			if in.IsNull() {
				in.Skip()
				out.DataPoints = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.DataPoints = make([]domain.DataPoint, 0, 1)
				} else {
					out.DataPoints = []domain.DataPoint{}
				}
				for !in.IsDelim(']') {
					var v64 domain.DataPoint
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain8(in, &v64)
					out.DataPoints = append(out.DataPoints, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "builtin":
			out.BuiltIn = bool(in.Bool())
		case "units":
			out.Units = string(in.String())
		case "base":
			out.Base = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain5(out *jwriter.Writer, in domain.GraphConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"footer\":")
	out.Bool(bool(in.Footer))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"format\":")
	out.String(string(in.Format))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"returnset\":")
	out.String(string(in.ReturnSet))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tags\":")
	if in.Tags == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v65First := true
		for v65Name, v65Value := range in.Tags {
			if !v65First {
				out.RawByte(',')
			}
			v65First = false
			out.String(string(v65Name))
			out.RawByte(':')
			if v65Value == nil {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v66, v67 := range v65Value {
					if v66 > 0 {
						out.RawByte(',')
					}
					out.String(string(v67))
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"miny\":")
	if in.MinY == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.MinY))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"maxy\":")
	if in.MaxY == nil {
		out.RawString("null")
	} else {
		out.Int(int(*in.MaxY))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"yAxisLabel\":")
	out.String(string(in.YAxisLabel))
	if in.TimeZone != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"timezone\":")
		out.String(string(in.TimeZone))
	}
	if in.DownSample != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"downsample\":")
		out.String(string(in.DownSample))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"range\":")
	if in.Range == nil {
		out.RawString("null")
	} else {
		easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain7(out, *in.Range)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"datapoints\":")
	if in.DataPoints == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v68, v69 := range in.DataPoints {
			if v68 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain8(out, v69)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"builtin\":")
	out.Bool(bool(in.BuiltIn))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"units\":")
	out.String(string(in.Units))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"base\":")
	out.Int(int(in.Base))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain8(in *jlexer.Lexer, out *domain.DataPoint) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aggregator":
			out.Aggregator = string(in.String())
		case "color":
			out.Color = string(in.String())
		case "expression":
			out.Expression = string(in.String())
		case "fill":
			out.Fill = bool(in.Bool())
		case "format":
			out.Format = string(in.String())
		case "legend":
			out.Legend = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		case "metricSource":
			out.MetricSource = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "rate":
			out.Rate = bool(in.Bool())
		case "rateOptions":
			if in.IsNull() {
				in.Skip()
				out.RateOptions = nil
			} else {
				if out.RateOptions == nil {
					out.RateOptions = new(domain.DataPointRateOptions)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.RateOptions).UnmarshalJSON(data))
				}
			}
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain8(out *jwriter.Writer, in domain.DataPoint) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"aggregator\":")
	out.String(string(in.Aggregator))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"color\":")
	out.String(string(in.Color))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"expression\":")
	out.String(string(in.Expression))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fill\":")
	out.Bool(bool(in.Fill))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"format\":")
	out.String(string(in.Format))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"legend\":")
	out.String(string(in.Legend))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"metric\":")
	out.String(string(in.Metric))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"metricSource\":")
	out.String(string(in.MetricSource))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rate\":")
	out.Bool(bool(in.Rate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rateOptions\":")
	if in.RateOptions == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.RateOptions).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain7(in *jlexer.Lexer, out *domain.GraphConfigRange) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "start":
			out.Start = string(in.String())
		case "end":
			out.End = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain7(out *jwriter.Writer, in domain.GraphConfigRange) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"start\":")
	out.String(string(in.Start))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"end\":")
	out.String(string(in.End))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain4(in *jlexer.Lexer, out *domain.MetricConfig) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Query":
			easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain9(in, &out.Query)
		case "Metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Metrics = make([]domain.Metric, 0, 1)
				} else {
					out.Metrics = []domain.Metric{}
				}
				for !in.IsDelim(']') {
					var v70 domain.Metric
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain10(in, &v70)
					out.Metrics = append(out.Metrics, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain4(out *jwriter.Writer, in domain.MetricConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Query\":")
	easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain9(out, in.Query)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Metrics\":")
	if in.Metrics == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v71, v72 := range in.Metrics {
			if v71 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain10(out, v72)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain10(in *jlexer.Lexer, out *domain.Metric) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ID":
			out.ID = string(in.String())
		case "Name":
			out.Name = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "Counter":
			out.Counter = bool(in.Bool())
		case "CounterMax":
			if in.IsNull() {
				in.Skip()
				out.CounterMax = nil
			} else {
				if out.CounterMax == nil {
					out.CounterMax = new(int64)
				}
				*out.CounterMax = int64(in.Int64())
			}
		case "ResetValue":
			out.ResetValue = int64(in.Int64())
		case "Unit":
			out.Unit = string(in.String())
		case "BuiltIn":
			out.BuiltIn = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain10(out *jwriter.Writer, in domain.Metric) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ID\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Counter\":")
	out.Bool(bool(in.Counter))
	if in.CounterMax != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"CounterMax\":")
		if in.CounterMax == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.CounterMax))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ResetValue\":")
	out.Int64(int64(in.ResetValue))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Unit\":")
	out.String(string(in.Unit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"BuiltIn\":")
	out.Bool(bool(in.BuiltIn))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain9(in *jlexer.Lexer, out *domain.QueryConfig) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "RequestURI":
			out.RequestURI = string(in.String())
		case "Method":
			out.Method = string(in.String())
		case "Headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Headers = make(http.Header)
				} else {
					out.Headers = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v73 []string
					if in.IsNull() {
						in.Skip()
						v73 = nil
					} else {
						in.Delim('[')
						if !in.IsDelim(']') {
							v73 = make([]string, 0, 4)
						} else {
							v73 = []string{}
						}
						for !in.IsDelim(']') {
							var v74 string
							v74 = string(in.String())
							v73 = append(v73, v74)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v73
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain9(out *jwriter.Writer, in domain.QueryConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"RequestURI\":")
	out.String(string(in.RequestURI))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Method\":")
	out.String(string(in.Method))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Headers\":")
	if in.Headers == nil {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v75First := true
		for v75Name, v75Value := range in.Headers {
			if !v75First {
				out.RawByte(',')
			}
			v75First = false
			out.String(string(v75Name))
			out.RawByte(':')
			if v75Value == nil {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v76, v77 := range v75Value {
					if v76 > 0 {
						out.RawByte(',')
					}
					out.String(string(v77))
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Data\":")
	out.String(string(in.Data))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain2(in *jlexer.Lexer, out *domain.Prereq) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Script":
			out.Script = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain2(out *jwriter.Writer, in domain.Prereq) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Script\":")
	out.String(string(in.Script))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain1(in *jlexer.Lexer, out *domain.Command) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Command":
			out.Command = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "CommitOnSuccess":
			out.CommitOnSuccess = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain1(out *jwriter.Writer, in domain.Command) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Command\":")
	out.String(string(in.Command))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Description\":")
	out.String(string(in.Description))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"CommitOnSuccess\":")
	out.Bool(bool(in.CommitOnSuccess))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition7(in *jlexer.Lexer, out *servicedefinition.SnapshotCommands) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Pause":
			out.Pause = string(in.String())
		case "Resume":
			out.Resume = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition7(out *jwriter.Writer, in servicedefinition.SnapshotCommands) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Pause\":")
	out.String(string(in.Pause))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Resume\":")
	out.String(string(in.Resume))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition6(in *jlexer.Lexer, out *servicedefinition.LogConfig) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Path":
			out.Path = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "Filters":
			if in.IsNull() {
				in.Skip()
				out.Filters = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Filters = make([]string, 0, 4)
				} else {
					out.Filters = []string{}
				}
				for !in.IsDelim(']') {
					var v78 string
					v78 = string(in.String())
					out.Filters = append(out.Filters, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "LogTags":
			if in.IsNull() {
				in.Skip()
				out.LogTags = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.LogTags = make([]servicedefinition.LogTag, 0, 2)
				} else {
					out.LogTags = []servicedefinition.LogTag{}
				}
				for !in.IsDelim(']') {
					var v79 servicedefinition.LogTag
					easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition8(in, &v79)
					out.LogTags = append(out.LogTags, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition6(out *jwriter.Writer, in servicedefinition.LogConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Filters\":")
	if in.Filters == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v80, v81 := range in.Filters {
			if v80 > 0 {
				out.RawByte(',')
			}
			out.String(string(v81))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LogTags\":")
	if in.LogTags == nil {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v82, v83 := range in.LogTags {
			if v82 > 0 {
				out.RawByte(',')
			}
			easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition8(out, v83)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition8(in *jlexer.Lexer, out *servicedefinition.LogTag) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition8(out *jwriter.Writer, in servicedefinition.LogTag) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Value\":")
	out.String(string(in.Value))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition5(in *jlexer.Lexer, out *servicedefinition.Volume) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Owner":
			out.Owner = string(in.String())
		case "Permission":
			out.Permission = string(in.String())
		case "ResourcePath":
			out.ResourcePath = string(in.String())
		case "ContainerPath":
			out.ContainerPath = string(in.String())
		case "Type":
			out.Type = string(in.String())
		case "InitContainerPath":
			out.InitContainerPath = string(in.String())
		case "ExcludeFromBackups":
			out.ExcludeFromBackups = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition5(out *jwriter.Writer, in servicedefinition.Volume) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Owner\":")
	out.String(string(in.Owner))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Permission\":")
	out.String(string(in.Permission))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ResourcePath\":")
	out.String(string(in.ResourcePath))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ContainerPath\":")
	out.String(string(in.ContainerPath))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"InitContainerPath\":")
	out.String(string(in.InitContainerPath))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ExcludeFromBackups\":")
	out.Bool(bool(in.ExcludeFromBackups))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition4(in *jlexer.Lexer, out *servicedefinition.Task) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Schedule":
			out.Schedule = string(in.String())
		case "Command":
			out.Command = string(in.String())
		case "LastRunAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastRunAt).UnmarshalJSON(data))
			}
		case "TotalRunCount":
			out.TotalRunCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition4(out *jwriter.Writer, in servicedefinition.Task) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Schedule\":")
	out.String(string(in.Schedule))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Command\":")
	out.String(string(in.Command))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"LastRunAt\":")
	out.Raw((in.LastRunAt).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"TotalRunCount\":")
	out.Int(int(in.TotalRunCount))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomain(in *jlexer.Lexer, out *domain.MinMax) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Min":
			out.Min = int(in.Int())
		case "Max":
			out.Max = int(in.Int())
		case "Default":
			out.Default = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomain(out *jwriter.Writer, in domain.MinMax) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Min\":")
	out.Int(int(in.Min))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Max\":")
	out.Int(int(in.Max))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Default\":")
	out.Int(int(in.Default))
	out.RawByte('}')
}
func easyjsonCd93bc43DecodeGithubComControlCenterServicedDomainServicedefinition3(in *jlexer.Lexer, out *servicedefinition.ConfigFile) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Filename":
			out.Filename = string(in.String())
		case "Owner":
			out.Owner = string(in.String())
		case "Permissions":
			out.Permissions = string(in.String())
		case "Content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjsonCd93bc43EncodeGithubComControlCenterServicedDomainServicedefinition3(out *jwriter.Writer, in servicedefinition.ConfigFile) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Filename\":")
	out.String(string(in.Filename))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Owner\":")
	out.String(string(in.Owner))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Permissions\":")
	out.String(string(in.Permissions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Content\":")
	out.String(string(in.Content))
	out.RawByte('}')
}
